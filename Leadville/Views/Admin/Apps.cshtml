@using CST.Prdn.ViewModels

@{
    ViewBag.Title = "Apps";
}

<h2>Apps</h2>

@(
 Html.Telerik().Grid<AppViewModel>()
    .Name("GridApps")
    .DataKeys(dataKeys => dataKeys.Add(p => p.AppID))
    .ToolBar(commands => commands.Insert().ButtonType(GridButtonType.ImageAndText).ImageHtmlAttributes(new { style = "margin-left:0" } ))
    .DataBinding(dataBinding =>
    {
        dataBinding.Ajax()
            .Select("_SelectApp", "Admin")
            .Insert("_InsertApp", "Admin")
            .Update("_SaveApp", "Admin")
            .Delete("_DeleteApp", "Admin")
            ;
    })
    .Columns(columns =>
    {
        columns.Bound(p => p.AppID).Width(80).ReadOnly();
        columns.Bound(p => p.Code).Width(100).HtmlAttributes(new { @class = "text-input-upper" });
        columns.Bound(p => p.Name).Width(200);
        columns.Bound(p => p.SysAdmin).Width(50).ClientTemplate("<input type='checkbox' disabled='disabled' name='SysAdmin' <#= SysAdmin? checked='checked' : '' #> />"); 
        columns.Bound(p => p.Active).Width(50).ClientTemplate("<input type='checkbox' disabled='disabled' name='Active' <#= Active? checked='checked' : '' #> />");

        columns.Bound(p => p.AppID)
            .ClientTemplate(
                @Html.ActionLink(linkText: "Groups", actionName: "Groups", controllerName: "Admin", routeValues: new { appID = "<#= AppID #>" },
                    htmlAttributes: new { @class = "t-button" }).ToString()
            )
            .Title("").Width(80).ReadOnly();

        columns.Command(commands =>
        {
            commands.Edit().ButtonType(GridButtonType.ImageAndText);
            commands.Delete().ButtonType(GridButtonType.ImageAndText);
        }).Width(220).Title("Commands");
                               
    })
    .Editable(editing => editing.Mode(GridEditMode.InLine))
    .Pageable()
    //.Scrollable()
    .Sortable()
    .ClientEvents(events => events.OnLoad("onAppGridLoad"))
    
    .DetailView(ordersDetailView => ordersDetailView.ClientTemplate(
            Html.Telerik().Grid<GroupViewModel>()
            .Name("GridAppGroups_<#= AppID #>")

            .DataKeys(dataKeys => dataKeys.Add(p => p.GroupID))
                .ToolBar(commands => commands.Insert().ButtonType(GridButtonType.ImageAndText).ImageHtmlAttributes(new { style = "margin-left:0" }))
            .DataBinding(dataBinding =>
            {
                dataBinding.Ajax()
                    .Select("_SelectAppGroup", "Admin", new { appID = "<#= AppID #>" })
                    .Insert("_InsertAppGroup", "Admin", new { appID = "<#= AppID #>" })
                    .Update("_SaveAppGroup", "Admin")
                    .Delete("_DeleteAppGroup", "Admin")
                    ;
            })
            .Columns(columns =>
            {
                //columns.Bound(p => p.GroupID).Width(90).ReadOnly();
                columns.Bound(p => p.AppGroupCode).ReadOnly();
                columns.Bound(p => p.Code).Width(100).HtmlAttributes(new { @class = "text-input-upper" });
                columns.Bound(p => p.Name).Width(200);
                columns.Bound(p => p.Description);
                columns.Bound(p => p.AppAdmin).ClientTemplate("<input type='checkbox' disabled='disabled' name='AppAdmin' <#= AppAdmin? checked='checked' : '' #> />"); 
                columns.Bound(p => p.Active).ClientTemplate("<input type='checkbox' disabled='disabled' name='Active' <#= Active? checked='checked' : '' #> />");

                columns.Bound(p => p.AppID)
                    .ClientTemplate(
                        @Html.ActionLink(linkText: "Users", actionName: "GroupUsers", controllerName: "Admin", routeValues: new { groupID = "<#= GroupID #>" },
                            htmlAttributes: new { @class = "t-button" }).ToString()
                    )
                    .Title("").Width(80).ReadOnly();
                
                
                columns.Command(commands =>
                {
                    commands.Edit().ButtonType(GridButtonType.ImageAndText);
                    commands.Delete().ButtonType(GridButtonType.ImageAndText);
                }).Width(220).Title("Commands");
                
            })
            .Editable(editing => editing.Mode(GridEditMode.InLine))
            .Pageable()
            .Sortable()
            .ClientEvents(events => events.OnLoad("onGrpGridLoad"))
            .ToHtmlString()
    ))    
    
)

<script type="text/javascript">
    function onAppGridLoad(e) {
        bindTGridUpper();
        tGridInsertCmdTxt(this, "Insert App");
    };

    function onGrpGridLoad(e) {
        bindTGridUpper();
        tGridInsertCmdTxt(this, "Insert Group");
    };
</script>
